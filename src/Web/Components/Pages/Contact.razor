@page "/Contact"
@using System.ComponentModel.DataAnnotations
@using Web.Features.Email

@inject IEmailService EmailService

@inherits BasePage

<PageTitle>Contact Kevin Becker</PageTitle>

<section class="section dark-background page-header">
    <div class="container section-title mt-5" data-aos="fade-up">
        <h2>Contact Me</h2>
        <p>Drop a line and I'll get back with you</p>
    </div>
</section>

<!-- Contact Section -->
<section id="contact" class="contact section">
    <div class="container" data-aos="fade-up" data-aos-delay="100">
        <div class="row gy-4">
            <div class="col-lg-4">
                <div class="info-item d-flex" data-aos="fade-up" data-aos-delay="300">
                    <i class="bi bi-linkedin flex-shrink-0"></i>
                    <div>
                        <h3>LinkedIn</h3>
                        <p>
                            View my <a href="https://www.linkedin.com/in/ksbecker/" target="_blank">profile</a> and send
                            me a message.
                        </p>
                    </div>
                </div><!-- End Info Item -->

                <div class="info-item d-flex" data-aos="fade-up" data-aos-delay="500">
                    <i class="bi bi-envelope flex-shrink-0"></i>
                    <div>
                        <h3>Email Me</h3>
                        <p>
                            In order to protect me from spam, you can use this email address to send me a direct email:
                            <a href="mailto:wiry05tracks@icloud.com">wiry05tracks@icloud.com</a>
                        </p>
                    </div>
                </div><!-- End Info Item -->

            </div>

            <div class="col-lg-8">
                <img src="/images/contact-kite.jpg" class="img-fluid"
                     alt="A kite in the sky with the string coming down" />
            </div>

            @if (_displayForm)
            {
                <div class="col-lg-8">
                    <EditForm Model="_contactFormData"
                              OnValidSubmit="OnContactFormValidSubmit"
                              data-aos="fade-up"
                              data-aos-delay="200"
                              class="email-form">
                        <DataAnnotationsValidator />

                        <div class="row gy-4">

                            <div class="col-md-6">
                                <InputText @bind-Value="_contactFormData.Name"
                                           type="text"
                                           class="form-control"
                                           placeholder="Your Name" />
                                <ValidationMessage For="@(() => _contactFormData.Name)" class="invalid-feedback" />
                            </div>

                            <div class="col-md-6 ">
                                <InputText @bind-Value="_contactFormData.EmailAddress"
                                           type="text"
                                           class="form-control"
                                           placeholder="Your Email" />
                                <ValidationMessage For="@(() => _contactFormData.EmailAddress)" class="invalid-feedback" />
                            </div>

                            <div class="col-md-12">
                                <InputText @bind-Value="_contactFormData.Subject"
                                           type="text"
                                           class="form-control"
                                           placeholder="Subject" />
                                <ValidationMessage For="@(() => _contactFormData.Subject)" class="invalid-feedback" />
                            </div>

                            <div class="col-md-12">
                                <InputTextArea @bind-Value="_contactFormData.Message"
                                               class="form-control"
                                               rows="6"
                                               placeholder="Message" />
                                <ValidationMessage For="@(() => _contactFormData.Message)" class="invalid-feedback" />
                            </div>

                            <button type="submit">Send Message</button>
                        </div>
                    </EditForm>
                </div>
            }
            else if (_isSending)
            {
                <div class="loading">
                    Sending ...
                </div>
            }
            else
            {
                <div class="sent-message">
                    Your message has been sent. Thank you!
                </div>
            }
        </div>
    </div>
</section><!-- /Contact Section -->
@code {
    private ContactFormData _contactFormData = new();
    private CancellationTokenSource _cancellationTokenSource = new();
    private bool _displayForm = true;
    private bool _isSending = false;

    private async Task OnContactFormValidSubmit()
    {
        _isSending = true;
        _displayForm = false;

        await EmailService.SendContactFormAsync(_contactFormData, _cancellationTokenSource.Token);
        
        // I've added this artificial delay to show the "sending" message
        await Task.Delay(1_000);

        _isSending = false;
    }
}